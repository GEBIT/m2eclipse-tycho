/*******************************************************************************
 * Copyright (c) 2008 Sonatype, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

package org.sonatype.tycho.m2e.internal;

import java.io.InputStream;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.jar.Manifest;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.m2e.core.embedder.ArtifactKey;
import org.eclipse.osgi.util.ManifestElement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EmbeddedArtifacts
{
    private static final Logger log = LoggerFactory.getLogger( EmbeddedArtifacts.class );

    /**
     * This manifest attribute is generated by maven-bundle-plugin and provides mapping between bundle classpath entries
     * and corresponding maven dependencies
     */
    private static final String EMBEDDED_ARTIFACTS = "Embedded-Artifacts";

    public static Map<ArtifactKey, String> getEmbeddedArtifacts( IProject project )
    {
        Map<ArtifactKey, String> result = new LinkedHashMap<ArtifactKey, String>();

        try
        {
            IFile mfFile = PDEProjectHelper.getBundleManifest( project );

            if ( mfFile != null && mfFile.isAccessible() )
            {
                Manifest mf;
                try (InputStream is = mfFile.getContents())
                {
                    mf = new Manifest( is );
                }

                String value = mf.getMainAttributes().getValue( EMBEDDED_ARTIFACTS );

                if ( value != null )
                {
                    for ( ManifestElement me : ManifestElement.parseHeader( EMBEDDED_ARTIFACTS, value ) )
                    {
                        String path = me.getValue();
                        String g = me.getAttribute( "g" );
                        String a = me.getAttribute( "a" );
                        String v = me.getAttribute( "v" );
                        String c = me.getAttribute( "c" );

                        if ( g != null && a != null && v != null && path != null )
                        {
                            result.put( new ArtifactKey( g, a, v, c ), path );
                        }
                        else
                        {
                            log.debug( "Malformd Include-Artifacts element paht={};g={};a={};v={};c={}", new Object[] {
                                path, g, a, v, c } );
                        }
                    }
                }
            }
        }
        catch ( Exception e )
        {
            log.warn( "Count not read generated bundle manifest of project {}", project.getName(), e );
        }

        return result;
    }

}
